CCS PCM C Compiler, Version 5.070, 56587               04-Mar-23 21:27

               Filename:   C:\Users\HP\Documents\dht11\main.lst

               ROM used:   2071 words (51%)
                           Largest free fragment is 1836
               RAM used:   82 (43%) at main() level
                           111 (58%) worst case
               Stack used: 3 locations (2 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  BTFSS  0A.3
0005:  BCF    0A.4
0006:  BTFSC  0A.3
0007:  BSF    0A.4
0008:  BCF    0A.3
0009:  BTFSC  03.5
000A:  GOTO   00F
000B:  MOVWF  24
000C:  SWAPF  03,W
000D:  MOVWF  25
000E:  GOTO   014
000F:  BCF    03.5
0010:  MOVWF  24
0011:  SWAPF  03,W
0012:  MOVWF  25
0013:  BSF    25.1
0014:  BTFSS  0A.4
0015:  BCF    0A.3
0016:  BTFSC  0A.4
0017:  BSF    0A.3
0018:  BCF    0A.4
0019:  MOVF   0A,W
001A:  MOVWF  2B
001B:  CLRF   0A
001C:  BCF    03.7
001D:  SWAPF  24,F
001E:  MOVF   04,W
001F:  MOVWF  26
0020:  MOVF   20,W
0021:  MOVWF  27
0022:  MOVF   21,W
0023:  MOVWF  28
0024:  MOVF   22,W
0025:  MOVWF  29
0026:  MOVF   23,W
0027:  MOVWF  2A
0028:  BCF    03.5
0029:  BTFSS  0B.5
002A:  GOTO   02D
002B:  BTFSC  0B.2
002C:  GOTO   040
002D:  MOVF   26,W
002E:  MOVWF  04
002F:  MOVF   27,W
0030:  MOVWF  20
0031:  MOVF   28,W
0032:  MOVWF  21
0033:  MOVF   29,W
0034:  MOVWF  22
0035:  MOVF   2A,W
0036:  MOVWF  23
0037:  MOVF   2B,W
0038:  MOVWF  0A
0039:  SWAPF  25,W
003A:  MOVWF  03
003B:  BCF    03.5
003C:  SWAPF  24,W
003D:  BTFSC  25.1
003E:  BSF    03.5
003F:  RETFIE
0040:  BCF    0A.3
0041:  GOTO   042
....................  
.................... /* 
....................  * Interfacing PIC16F877A microcontroller with DHT11 temperature 
....................  * and humidity sensor. 
....................  * C Code for CCS C compiler. 
....................  * Temperature, humidity and pressure values are displayed on 20x4 LCD. 
....................  * This is a free software with NO WARRANTY. 
....................  * https://simple - circuit.com / 
....................  */ 
.................... // LCD module connections 
.................... // end LCD module connections 
.................... //!#include <16F72.h> 
.................... #include <16F73.h> 
.................... //////////// Standard Header file for the PIC16F73 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F73 
*
0095:  BCF    0A.0
0096:  BCF    0A.1
0097:  BCF    0A.2
0098:  ADDWF  02,F
0099:  GOTO   050
009A:  GOTO   05B
009B:  GOTO   066
009C:  GOTO   071
009D:  GOTO   07C
009E:  GOTO   087
009F:  MOVF   76,W
00A0:  ANDLW  07
00A1:  MOVWF  20
00A2:  RRF    76,W
00A3:  MOVWF  21
00A4:  RRF    21,F
00A5:  RRF    21,F
00A6:  MOVLW  1F
00A7:  ANDWF  21,F
00A8:  MOVF   21,W
00A9:  ADDWF  78,W
00AA:  MOVWF  04
00AB:  CLRF   21
00AC:  INCF   21,F
00AD:  INCF   20,F
00AE:  GOTO   0B0
00AF:  RLF    21,F
00B0:  DECFSZ 20,F
00B1:  GOTO   0AF
00B2:  MOVF   77,F
00B3:  BTFSC  03.2
00B4:  GOTO   0B8
00B5:  MOVF   21,W
00B6:  IORWF  00,F
00B7:  GOTO   0BB
00B8:  COMF   21,F
00B9:  MOVF   21,W
00BA:  ANDWF  00,F
00BB:  RETURN
*
014F:  MOVLW  8E
0150:  MOVWF  20
0151:  MOVF   77,W
0152:  MOVWF  21
0153:  MOVF   76,W
0154:  MOVWF  22
0155:  CLRF   23
0156:  MOVF   21,F
0157:  BTFSS  03.2
0158:  GOTO   163
0159:  MOVF   22,W
015A:  MOVWF  21
015B:  CLRF   22
015C:  MOVLW  08
015D:  SUBWF  20,F
015E:  MOVF   21,F
015F:  BTFSS  03.2
0160:  GOTO   163
0161:  CLRF   20
0162:  GOTO   16B
0163:  BCF    03.0
0164:  BTFSC  21.7
0165:  GOTO   16A
0166:  RLF    22,F
0167:  RLF    21,F
0168:  DECF   20,F
0169:  GOTO   163
016A:  BCF    21.7
*
0184:  BCF    03.5
0185:  MOVF   7A,W
0186:  BTFSC  03.2
0187:  GOTO   270
0188:  BSF    03.5
0189:  MOVWF  28
018A:  MOVF   20,W
018B:  BTFSS  03.2
018C:  GOTO   18F
018D:  BCF    03.5
018E:  GOTO   270
018F:  SUBWF  28,F
0190:  BTFSS  03.0
0191:  GOTO   199
0192:  MOVLW  7F
0193:  ADDWF  28,F
0194:  BTFSS  03.0
0195:  GOTO   198
0196:  BCF    03.5
0197:  GOTO   270
0198:  GOTO   1A3
0199:  MOVLW  81
019A:  SUBWF  28,F
019B:  BTFSC  03.0
019C:  GOTO   19F
019D:  BCF    03.5
019E:  GOTO   270
019F:  BTFSS  03.2
01A0:  GOTO   1A3
01A1:  BCF    03.5
01A2:  GOTO   270
01A3:  MOVF   28,W
01A4:  BCF    03.5
01A5:  MOVWF  20
01A6:  CLRF   21
01A7:  CLRF   22
01A8:  CLRF   23
01A9:  BSF    03.5
01AA:  CLRF   27
01AB:  BCF    03.5
01AC:  MOVF   7B,W
01AD:  BSF    03.5
01AE:  MOVWF  26
01AF:  BSF    26.7
01B0:  BCF    03.5
01B1:  MOVF   7C,W
01B2:  BSF    03.5
01B3:  MOVWF  25
01B4:  BCF    03.5
01B5:  MOVF   7D,W
01B6:  BSF    03.5
01B7:  MOVWF  24
01B8:  MOVLW  19
01B9:  MOVWF  28
01BA:  MOVF   23,W
01BB:  SUBWF  24,F
01BC:  BTFSC  03.0
01BD:  GOTO   1CE
01BE:  MOVLW  01
01BF:  SUBWF  25,F
01C0:  BTFSC  03.0
01C1:  GOTO   1CE
01C2:  SUBWF  26,F
01C3:  BTFSC  03.0
01C4:  GOTO   1CE
01C5:  SUBWF  27,F
01C6:  BTFSC  03.0
01C7:  GOTO   1CE
01C8:  INCF   27,F
01C9:  INCF   26,F
01CA:  INCF   25,F
01CB:  MOVF   23,W
01CC:  ADDWF  24,F
01CD:  GOTO   202
01CE:  MOVF   22,W
01CF:  SUBWF  25,F
01D0:  BTFSC  03.0
01D1:  GOTO   1E9
01D2:  MOVLW  01
01D3:  SUBWF  26,F
01D4:  BTFSC  03.0
01D5:  GOTO   1E9
01D6:  SUBWF  27,F
01D7:  BTFSC  03.0
01D8:  GOTO   1E9
01D9:  INCF   27,F
01DA:  INCF   26,F
01DB:  MOVF   22,W
01DC:  ADDWF  25,F
01DD:  MOVF   23,W
01DE:  ADDWF  24,F
01DF:  BTFSS  03.0
01E0:  GOTO   202
01E1:  INCF   25,F
01E2:  BTFSS  03.2
01E3:  GOTO   202
01E4:  INCF   26,F
01E5:  BTFSS  03.2
01E6:  GOTO   202
01E7:  INCF   27,F
01E8:  GOTO   202
01E9:  MOVF   21,W
01EA:  IORLW  80
01EB:  SUBWF  26,F
01EC:  BTFSC  03.0
01ED:  GOTO   1FF
01EE:  MOVLW  01
01EF:  SUBWF  27,F
01F0:  BTFSC  03.0
01F1:  GOTO   1FF
01F2:  INCF   27,F
01F3:  MOVF   21,W
01F4:  IORLW  80
01F5:  ADDWF  26,F
01F6:  MOVF   22,W
01F7:  ADDWF  25,F
01F8:  BTFSS  03.0
01F9:  GOTO   1DD
01FA:  INCF   26,F
01FB:  BTFSS  03.2
01FC:  GOTO   1DD
01FD:  INCF   27,F
01FE:  GOTO   1DD
01FF:  BCF    03.5
0200:  BSF    23.0
0201:  BSF    03.5
0202:  DECFSZ 28,F
0203:  GOTO   205
0204:  GOTO   212
0205:  BCF    03.0
0206:  RLF    24,F
0207:  RLF    25,F
0208:  RLF    26,F
0209:  RLF    27,F
020A:  BCF    03.0
020B:  BCF    03.5
020C:  RLF    23,F
020D:  RLF    22,F
020E:  RLF    21,F
020F:  BSF    03.5
0210:  RLF    29,F
0211:  GOTO   1BA
0212:  BTFSS  29.0
0213:  GOTO   21C
0214:  BCF    03.0
0215:  BCF    03.5
0216:  RRF    21,F
0217:  RRF    22,F
0218:  RRF    23,F
0219:  BSF    03.5
021A:  RRF    29,F
021B:  GOTO   221
021C:  BCF    03.5
021D:  DECF   20,F
021E:  BTFSC  03.2
021F:  GOTO   270
0220:  BSF    03.5
0221:  BTFSC  29.7
0222:  GOTO   24A
0223:  BCF    03.0
0224:  RLF    24,F
0225:  RLF    25,F
0226:  RLF    26,F
0227:  RLF    27,F
0228:  MOVF   23,W
0229:  SUBWF  24,F
022A:  BTFSC  03.0
022B:  GOTO   236
022C:  MOVLW  01
022D:  SUBWF  25,F
022E:  BTFSC  03.0
022F:  GOTO   236
0230:  SUBWF  26,F
0231:  BTFSC  03.0
0232:  GOTO   236
0233:  SUBWF  27,F
0234:  BTFSS  03.0
0235:  GOTO   261
0236:  MOVF   22,W
0237:  SUBWF  25,F
0238:  BTFSC  03.0
0239:  GOTO   241
023A:  MOVLW  01
023B:  SUBWF  26,F
023C:  BTFSC  03.0
023D:  GOTO   241
023E:  SUBWF  27,F
023F:  BTFSS  03.0
0240:  GOTO   261
0241:  MOVF   21,W
0242:  IORLW  80
0243:  SUBWF  26,F
0244:  BTFSC  03.0
0245:  GOTO   24A
0246:  MOVLW  01
0247:  SUBWF  27,F
0248:  BTFSS  03.0
0249:  GOTO   261
024A:  BCF    03.5
024B:  INCF   23,F
024C:  BTFSC  03.2
024D:  GOTO   250
024E:  BSF    03.5
024F:  GOTO   261
0250:  INCF   22,F
0251:  BTFSC  03.2
0252:  GOTO   255
0253:  BSF    03.5
0254:  GOTO   261
0255:  INCF   21,F
0256:  BTFSC  03.2
0257:  GOTO   25A
0258:  BSF    03.5
0259:  GOTO   261
025A:  INCF   20,F
025B:  BTFSC  03.2
025C:  GOTO   270
025D:  RRF    21,F
025E:  RRF    22,F
025F:  RRF    23,F
0260:  BSF    03.5
0261:  BCF    03.5
0262:  MOVF   7B,W
0263:  BSF    03.5
0264:  MOVWF  28
0265:  MOVF   21,W
0266:  XORWF  28,F
0267:  BTFSS  28.7
0268:  GOTO   26D
0269:  BCF    03.5
026A:  BSF    21.7
026B:  GOTO   274
026C:  BSF    03.5
026D:  BCF    03.5
026E:  BCF    21.7
026F:  GOTO   274
0270:  CLRF   20
0271:  CLRF   21
0272:  CLRF   22
0273:  CLRF   23
*
028C:  MOVLW  80
028D:  BTFSC  03.1
028E:  XORWF  21,F
028F:  CLRF   26
0290:  CLRF   27
0291:  BCF    03.5
0292:  MOVF   7B,W
0293:  BSF    03.5
0294:  MOVWF  25
0295:  MOVF   21,W
0296:  XORWF  25,F
0297:  BCF    03.5
0298:  MOVF   7A,W
0299:  BTFSC  03.2
029A:  GOTO   3A1
029B:  BSF    03.5
029C:  MOVWF  24
029D:  BCF    03.5
029E:  MOVWF  20
029F:  BSF    03.5
02A0:  MOVF   20,W
02A1:  BTFSC  03.2
02A2:  GOTO   3AD
02A3:  SUBWF  24,F
02A4:  BTFSC  03.2
02A5:  GOTO   337
02A6:  BTFSS  03.0
02A7:  GOTO   2EA
02A8:  MOVF   21,W
02A9:  MOVWF  2A
02AA:  BSF    2A.7
02AB:  MOVF   22,W
02AC:  MOVWF  29
02AD:  MOVF   23,W
02AE:  MOVWF  28
02AF:  CLRF   27
02B0:  BCF    03.0
02B1:  RRF    2A,F
02B2:  RRF    29,F
02B3:  RRF    28,F
02B4:  RRF    27,F
02B5:  DECFSZ 24,F
02B6:  GOTO   2AF
02B7:  BTFSS  25.7
02B8:  GOTO   2BC
02B9:  BSF    26.0
02BA:  GOTO   3CD
02BB:  BCF    26.0
02BC:  BCF    24.0
02BD:  BSF    26.4
02BE:  MOVLW  7D
02BF:  MOVWF  04
02C0:  GOTO   3E2
02C1:  BCF    26.4
02C2:  BTFSC  25.7
02C3:  GOTO   2D0
02C4:  BTFSS  24.0
02C5:  GOTO   2DD
02C6:  RRF    2A,F
02C7:  RRF    29,F
02C8:  RRF    28,F
02C9:  RRF    27,F
02CA:  BCF    03.5
02CB:  INCF   20,F
02CC:  BTFSC  03.2
02CD:  GOTO   3C7
02CE:  BSF    03.5
02CF:  GOTO   2DD
02D0:  BTFSC  2A.7
02D1:  GOTO   2E0
02D2:  BCF    03.0
02D3:  RLF    27,F
02D4:  RLF    28,F
02D5:  RLF    29,F
02D6:  RLF    2A,F
02D7:  BCF    03.5
02D8:  DECF   20,F
02D9:  BTFSC  03.2
02DA:  GOTO   3C7
02DB:  BSF    03.5
02DC:  GOTO   2D0
02DD:  BSF    26.6
02DE:  GOTO   35A
02DF:  BCF    26.6
02E0:  BCF    03.5
02E1:  MOVF   7B,W
02E2:  BSF    03.5
02E3:  MOVWF  25
02E4:  BTFSS  25.7
02E5:  GOTO   2E8
02E6:  BSF    2A.7
02E7:  GOTO   3BB
02E8:  BCF    2A.7
02E9:  GOTO   3BB
02EA:  MOVF   20,W
02EB:  MOVWF  24
02EC:  BCF    03.5
02ED:  MOVWF  20
02EE:  MOVF   7A,W
02EF:  BSF    03.5
02F0:  SUBWF  24,F
02F1:  BCF    03.5
02F2:  MOVF   7B,W
02F3:  BSF    03.5
02F4:  MOVWF  2A
02F5:  BSF    2A.7
02F6:  BCF    03.5
02F7:  MOVF   7C,W
02F8:  BSF    03.5
02F9:  MOVWF  29
02FA:  BCF    03.5
02FB:  MOVF   7D,W
02FC:  BSF    03.5
02FD:  MOVWF  28
02FE:  CLRF   27
02FF:  BCF    03.0
0300:  RRF    2A,F
0301:  RRF    29,F
0302:  RRF    28,F
0303:  RRF    27,F
0304:  DECFSZ 24,F
0305:  GOTO   2FE
0306:  BTFSS  25.7
0307:  GOTO   30B
0308:  BSF    26.1
0309:  GOTO   3CD
030A:  BCF    26.1
030B:  BCF    24.0
030C:  BSF    26.5
030D:  MOVLW  A3
030E:  MOVWF  04
030F:  GOTO   3E2
0310:  BCF    26.5
0311:  BTFSC  25.7
0312:  GOTO   31F
0313:  BTFSS  24.0
0314:  GOTO   32C
0315:  RRF    2A,F
0316:  RRF    29,F
0317:  RRF    28,F
0318:  RRF    27,F
0319:  BCF    03.5
031A:  INCF   20,F
031B:  BTFSC  03.2
031C:  GOTO   3C7
031D:  BSF    03.5
031E:  GOTO   32C
031F:  BTFSC  2A.7
0320:  GOTO   32F
0321:  BCF    03.0
0322:  RLF    27,F
0323:  RLF    28,F
0324:  RLF    29,F
0325:  RLF    2A,F
0326:  BCF    03.5
0327:  DECF   20,F
0328:  BTFSC  03.2
0329:  GOTO   3C7
032A:  BSF    03.5
032B:  GOTO   31F
032C:  BSF    26.7
032D:  GOTO   35A
032E:  BCF    26.7
032F:  MOVF   21,W
0330:  MOVWF  25
0331:  BTFSS  21.7
0332:  GOTO   335
0333:  BSF    2A.7
0334:  GOTO   3BB
0335:  BCF    2A.7
0336:  GOTO   3BB
0337:  MOVF   21,W
0338:  MOVWF  2A
0339:  BSF    2A.7
033A:  MOVF   22,W
033B:  MOVWF  29
033C:  MOVF   23,W
033D:  MOVWF  28
033E:  BTFSS  25.7
033F:  GOTO   344
0340:  BCF    2A.7
0341:  BSF    26.2
0342:  GOTO   3CD
0343:  BCF    26.2
0344:  CLRF   27
0345:  BCF    24.0
0346:  MOVLW  7D
0347:  MOVWF  04
0348:  GOTO   3E2
0349:  BTFSC  25.7
034A:  GOTO   372
034B:  BCF    03.5
034C:  MOVF   7B,W
034D:  BSF    03.5
034E:  MOVWF  25
034F:  BTFSS  24.0
0350:  GOTO   35A
0351:  RRF    2A,F
0352:  RRF    29,F
0353:  RRF    28,F
0354:  RRF    27,F
0355:  BCF    03.5
0356:  INCF   20,F
0357:  BTFSC  03.2
0358:  GOTO   3C7
0359:  BSF    03.5
035A:  BTFSS  27.7
035B:  GOTO   36D
035C:  INCF   28,F
035D:  BTFSS  03.2
035E:  GOTO   36D
035F:  INCF   29,F
0360:  BTFSS  03.2
0361:  GOTO   36D
0362:  INCF   2A,F
0363:  BTFSS  03.2
0364:  GOTO   36D
0365:  RRF    2A,F
0366:  RRF    29,F
0367:  RRF    28,F
0368:  BCF    03.5
0369:  INCF   20,F
036A:  BTFSC  03.2
036B:  GOTO   3C7
036C:  BSF    03.5
036D:  BTFSC  26.6
036E:  GOTO   2DF
036F:  BTFSC  26.7
0370:  GOTO   32E
0371:  GOTO   39A
0372:  MOVLW  80
0373:  XORWF  2A,F
0374:  BTFSS  2A.7
0375:  GOTO   37A
0376:  GOTO   3CD
0377:  MOVF   21,W
0378:  MOVWF  25
0379:  GOTO   38B
037A:  BCF    03.5
037B:  MOVF   7B,W
037C:  BSF    03.5
037D:  MOVWF  25
037E:  MOVF   2A,F
037F:  BTFSS  03.2
0380:  GOTO   38B
0381:  MOVF   29,F
0382:  BTFSS  03.2
0383:  GOTO   38B
0384:  MOVF   28,F
0385:  BTFSS  03.2
0386:  GOTO   38B
0387:  BCF    03.5
0388:  CLRF   20
0389:  BSF    03.5
038A:  GOTO   3BB
038B:  BTFSC  2A.7
038C:  GOTO   39A
038D:  BCF    03.0
038E:  RLF    27,F
038F:  RLF    28,F
0390:  RLF    29,F
0391:  RLF    2A,F
0392:  BCF    03.5
0393:  DECFSZ 20,F
0394:  GOTO   396
0395:  GOTO   398
0396:  BSF    03.5
0397:  GOTO   38B
0398:  GOTO   3C7
0399:  BSF    03.5
039A:  BTFSS  25.7
039B:  GOTO   39E
039C:  BSF    2A.7
039D:  GOTO   3BB
039E:  BCF    2A.7
039F:  GOTO   3BB
03A0:  BCF    03.5
03A1:  BSF    03.5
03A2:  MOVF   20,W
03A3:  BCF    03.5
03A4:  MOVWF  20
03A5:  BSF    03.5
03A6:  MOVF   21,W
03A7:  MOVWF  2A
03A8:  MOVF   22,W
03A9:  MOVWF  29
03AA:  MOVF   23,W
03AB:  MOVWF  28
03AC:  GOTO   3BB
03AD:  BCF    03.5
03AE:  MOVF   7A,W
03AF:  MOVWF  20
03B0:  MOVF   7B,W
03B1:  BSF    03.5
03B2:  MOVWF  2A
03B3:  BCF    03.5
03B4:  MOVF   7C,W
03B5:  BSF    03.5
03B6:  MOVWF  29
03B7:  BCF    03.5
03B8:  MOVF   7D,W
03B9:  BSF    03.5
03BA:  MOVWF  28
03BB:  MOVF   2A,W
03BC:  BCF    03.5
03BD:  MOVWF  21
03BE:  BSF    03.5
03BF:  MOVF   29,W
03C0:  BCF    03.5
03C1:  MOVWF  22
03C2:  BSF    03.5
03C3:  MOVF   28,W
03C4:  BCF    03.5
03C5:  MOVWF  23
03C6:  GOTO   401
03C7:  CLRF   20
03C8:  CLRF   21
03C9:  CLRF   22
03CA:  CLRF   23
03CB:  GOTO   401
03CC:  BSF    03.5
03CD:  CLRF   27
03CE:  COMF   28,F
03CF:  COMF   29,F
03D0:  COMF   2A,F
03D1:  COMF   27,F
03D2:  INCF   27,F
03D3:  BTFSS  03.2
03D4:  GOTO   3DB
03D5:  INCF   28,F
03D6:  BTFSS  03.2
03D7:  GOTO   3DB
03D8:  INCF   29,F
03D9:  BTFSC  03.2
03DA:  INCF   2A,F
03DB:  BTFSC  26.0
03DC:  GOTO   2BB
03DD:  BTFSC  26.1
03DE:  GOTO   30A
03DF:  BTFSC  26.2
03E0:  GOTO   343
03E1:  GOTO   377
03E2:  MOVF   00,W
03E3:  ADDWF  28,F
03E4:  BTFSS  03.0
03E5:  GOTO   3EC
03E6:  INCF   29,F
03E7:  BTFSS  03.2
03E8:  GOTO   3EC
03E9:  INCF   2A,F
03EA:  BTFSC  03.2
03EB:  BSF    24.0
03EC:  DECF   04,F
03ED:  MOVF   00,W
03EE:  ADDWF  29,F
03EF:  BTFSS  03.0
03F0:  GOTO   3F4
03F1:  INCF   2A,F
03F2:  BTFSC  03.2
03F3:  BSF    24.0
03F4:  DECF   04,F
03F5:  MOVF   00,W
03F6:  BTFSS  00.7
03F7:  XORLW  80
03F8:  ADDWF  2A,F
03F9:  BTFSC  03.0
03FA:  BSF    24.0
03FB:  BTFSC  26.4
03FC:  GOTO   2C1
03FD:  BTFSC  26.5
03FE:  GOTO   310
03FF:  GOTO   349
0400:  BCF    03.5
0402:  MOVF   77,W
0403:  XORWF  79,W
0404:  ANDLW  80
0405:  MOVWF  7B
0406:  BTFSS  77.7
0407:  GOTO   40D
0408:  COMF   76,F
0409:  COMF   77,F
040A:  INCF   76,F
040B:  BTFSC  03.2
040C:  INCF   77,F
040D:  BTFSS  79.7
040E:  GOTO   414
040F:  COMF   78,F
0410:  COMF   79,F
0411:  INCF   78,F
0412:  BTFSC  03.2
0413:  INCF   79,F
0414:  CLRF   21
0415:  CLRF   22
0416:  CLRF   20
0417:  CLRF   23
0418:  MOVF   79,W
0419:  BTFSS  03.2
041A:  GOTO   41E
041B:  MOVF   78,W
041C:  BTFSC  03.2
041D:  GOTO   438
041E:  MOVLW  10
041F:  MOVWF  7A
0420:  BCF    03.0
0421:  RLF    76,F
0422:  RLF    77,F
0423:  RLF    20,F
0424:  RLF    23,F
0425:  MOVF   79,W
0426:  SUBWF  23,W
0427:  BTFSS  03.2
0428:  GOTO   42B
0429:  MOVF   78,W
042A:  SUBWF  20,W
042B:  BTFSS  03.0
042C:  GOTO   434
042D:  MOVF   78,W
042E:  SUBWF  20,F
042F:  BTFSS  03.0
0430:  DECF   23,F
0431:  MOVF   79,W
0432:  SUBWF  23,F
0433:  BSF    03.0
0434:  RLF    21,F
0435:  RLF    22,F
0436:  DECFSZ 7A,F
0437:  GOTO   420
0438:  BTFSS  7B.7
0439:  GOTO   43F
043A:  COMF   21,F
043B:  COMF   22,F
043C:  INCF   21,F
043D:  BTFSC  03.2
043E:  INCF   22,F
043F:  RETURN
*
0625:  CLRF   20
0626:  CLRF   21
0627:  MOVF   74,W
0628:  BCF    03.0
0629:  BTFSC  75.0
062A:  ADDWF  20,F
062B:  RRF    20,F
062C:  RRF    21,F
062D:  BTFSC  75.1
062E:  ADDWF  20,F
062F:  RRF    20,F
0630:  RRF    21,F
0631:  BTFSC  75.2
0632:  ADDWF  20,F
0633:  RRF    20,F
0634:  RRF    21,F
0635:  BTFSC  75.3
0636:  ADDWF  20,F
0637:  RRF    20,F
0638:  RRF    21,F
0639:  BTFSC  75.4
063A:  ADDWF  20,F
063B:  RRF    20,F
063C:  RRF    21,F
063D:  BTFSC  75.5
063E:  ADDWF  20,F
063F:  RRF    20,F
0640:  RRF    21,F
0641:  BTFSC  75.6
0642:  ADDWF  20,F
0643:  RRF    20,F
0644:  RRF    21,F
0645:  BTFSC  75.7
0646:  ADDWF  20,F
0647:  RRF    20,F
0648:  RRF    21,F
0649:  RETURN
*
0655:  MOVLW  8E
0656:  MOVWF  20
0657:  MOVF   71,W
0658:  SUBWF  20,F
0659:  MOVF   72,W
065A:  MOVWF  22
065B:  MOVF   73,W
065C:  MOVWF  21
065D:  BSF    22.7
065E:  MOVF   20,F
065F:  BTFSC  03.2
0660:  GOTO   66C
0661:  BCF    03.0
0662:  MOVF   22,F
0663:  BTFSS  03.2
0664:  GOTO   668
0665:  MOVF   21,F
0666:  BTFSC  03.2
0667:  GOTO   66C
0668:  RRF    22,F
0669:  RRF    21,F
066A:  DECFSZ 20,F
066B:  GOTO   661
066C:  BTFSS  72.7
066D:  GOTO   673
066E:  COMF   21,F
066F:  COMF   22,F
0670:  INCF   21,F
0671:  BTFSC  03.2
0672:  INCF   22,F
....................  
.................... #list 
....................  
.................... #priority TIMER0,TIMER1 
.................... #fuses HS, NOWDT, 
.................... #use delay(clock = 8000000) 
*
00BC:  MOVLW  76
00BD:  MOVWF  04
00BE:  MOVF   00,W
00BF:  BTFSC  03.2
00C0:  GOTO   0CE
00C1:  MOVLW  02
00C2:  MOVWF  21
00C3:  CLRF   20
00C4:  DECFSZ 20,F
00C5:  GOTO   0C4
00C6:  DECFSZ 21,F
00C7:  GOTO   0C3
00C8:  MOVLW  97
00C9:  MOVWF  20
00CA:  DECFSZ 20,F
00CB:  GOTO   0CA
00CC:  DECFSZ 00,F
00CD:  GOTO   0C1
00CE:  RETURN
.................... #use fast_io(B) 
.................... #define DHT11_PIN PIN_A0 // connection pin between DHT11 and mcu 
.................... #define digit_one_on output_high(PIN_C0) 
.................... #define digit_one_off output_low(PIN_C0) 
.................... #define digit_two_on output_high(PIN_C1) 
.................... #define digit_two_off output_low(PIN_C1) 
.................... #define digit_three_on output_high(PIN_C2) 
.................... #define digit_three_off output_low(PIN_C2) 
.................... #define digit_four_on output_high(PIN_C3) 
.................... #define digit_four_off output_low(PIN_C3) 
.................... #define digit_five_on output_high(PIN_C4) 
.................... #define digit_five_off output_low(PIN_C4) 
.................... #define digit_six_on output_high(PIN_C5) 
.................... #define digit_six_off output_low(PIN_C5) 
.................... #define rly1_on output_low(PIN_A1) 
.................... #define rly1_off output_high(PIN_A1) 
.................... #define rly2_on output_low(PIN_A2) 
.................... #define rly2_off output_high(PIN_A2) 
.................... #define set_button input_state(PIN_C6) 
.................... #define up_button input_state(PIN_C7) 
.................... #define down_button input_state(PIN_A3) 
.................... #define TimeOut_Count 100 
.................... #define press 0 
.................... #define nopress 1 
.................... #rom  2037= {25,20,50,40,0,0,0,0} 
.................... #include <max6657.c> 
.................... #define TC_CLK  PIN_A0 
.................... #define TC_DATA PIN_A1 
.................... #define TC_CS   PIN_A2 
.................... int1 thermocouple_error;         //a handy dandy global error flag to tell you if a thermocouple is connected or not 
....................  
.................... void init_TC(int CS)  
.................... {  
....................    output_low(TC_CLK);  
*
00D1:  BSF    03.5
00D2:  BCF    05.0
00D3:  BCF    03.5
00D4:  BCF    05.0
....................    output_low(TC_DATA);  
00D5:  BSF    03.5
00D6:  BCF    05.1
00D7:  BCF    03.5
00D8:  BCF    05.1
....................    output_high(CS);            //if we idle high, the chip keeps doing conversions. Change this if you like  
00D9:  MOVF   72,W
00DA:  MOVWF  76
00DB:  MOVLW  01
00DC:  MOVWF  77
00DD:  CLRF   78
00DE:  CALL   09F
00DF:  MOVF   72,W
00E0:  MOVWF  76
00E1:  CLRF   77
00E2:  MOVLW  80
00E3:  MOVWF  78
00E4:  CALL   09F
.................... }  
....................  
.................... int16 read_TC(int CS)               //It takes 200ms (ish) for the MAX6675 to perform a conversion  
.................... {  
....................    int8 i;  
....................    int16 data;  
....................  
....................    output_low(CS);            //stop any conversion processes  
*
00EA:  MOVF   72,W
00EB:  MOVWF  76
00EC:  CLRF   77
00ED:  CLRF   78
00EE:  CALL   09F
00EF:  MOVF   72,W
00F0:  MOVWF  76
00F1:  CLRF   77
00F2:  MOVLW  80
00F3:  MOVWF  78
00F4:  CALL   09F
....................    delay_ms(1);               //and give it some time to power up (not very much, admittedly)  
00F5:  MOVLW  01
00F6:  MOVWF  76
00F7:  CALL   0BC
....................  
....................    for (i=0;i<16;i++){  
00F8:  CLRF   73
00F9:  MOVF   73,W
00FA:  SUBLW  0F
00FB:  BTFSS  03.0
00FC:  GOTO   113
....................       shift_left(&data,2,input(TC_DATA));      //reads in 2 bytes to data from the pin TC_DATA  
00FD:  BSF    03.5
00FE:  BSF    05.1
00FF:  BCF    03.5
0100:  BTFSC  05.1
0101:  GOTO   104
0102:  BCF    03.0
0103:  GOTO   105
0104:  BSF    03.0
0105:  RLF    74,F
0106:  RLF    75,F
....................       output_high(TC_CLK);  
0107:  BSF    03.5
0108:  BCF    05.0
0109:  BCF    03.5
010A:  BSF    05.0
....................       delay_us(1); //Descomentar si usa crystal mayor a 10MHz 
010B:  GOTO   10C
....................       output_low(TC_CLK);  
010C:  BSF    03.5
010D:  BCF    05.0
010E:  BCF    03.5
010F:  BCF    05.0
....................       delay_us(1); 
0110:  GOTO   111
0111:  INCF   73,F
0112:  GOTO   0F9
....................    }  
....................  
....................    thermocouple_error=bit_test(data,2);      //this is the thermocouple status bit  
0113:  BCF    2C.0
0114:  BTFSC  74.2
0115:  BSF    2C.0
....................    delay_ms(1);      
0116:  MOVLW  01
0117:  MOVWF  76
0118:  CALL   0BC
....................    output_high(CS);  
0119:  MOVF   72,W
011A:  MOVWF  76
011B:  MOVLW  01
011C:  MOVWF  77
011D:  CLRF   78
011E:  CALL   09F
011F:  MOVF   72,W
0120:  MOVWF  76
0121:  CLRF   77
0122:  MOVLW  80
0123:  MOVWF  78
0124:  CALL   09F
....................    return(data);  
0125:  MOVF   74,W
0126:  MOVWF  21
0127:  MOVF   75,W
0128:  MOVWF  22
.................... }  
....................  
.................... int16 sortout(int16 raw)  
.................... {  
....................     return(0x0FFF & (raw>>3));      //returns only the bits converning temperature  
*
0131:  RRF    75,W
0132:  MOVWF  23
0133:  RRF    74,W
0134:  MOVWF  22
0135:  RRF    23,F
0136:  RRF    22,F
0137:  RRF    23,F
0138:  RRF    22,F
0139:  MOVLW  1F
013A:  ANDWF  23,F
013B:  MOVF   22,W
013C:  MOVWF  20
013D:  MOVLW  0F
013E:  ANDWF  23,F
013F:  MOVF   22,W
0140:  MOVWF  21
0141:  MOVF   23,W
0142:  MOVWF  22
.................... }  
....................  
.................... float toFloat_TC(int16 tmp)  
.................... {  
....................    //return((((float)tmp/4.9127+459)*9/5)+32); 
....................    return((float)tmp/2.021142857-25);      //adjusts data to floating point format, and accounts for the decimal point  
*
014B:  MOVF   75,W
014C:  MOVWF  77
014D:  MOVF   74,W
014E:  MOVWF  76
*
016B:  MOVF   23,W
016C:  MOVWF  79
016D:  MOVF   22,W
016E:  MOVWF  78
016F:  MOVF   21,W
0170:  MOVWF  77
0171:  MOVF   20,W
0172:  MOVWF  76
0173:  MOVF   79,W
0174:  MOVWF  7D
0175:  MOVF   78,W
0176:  MOVWF  7C
0177:  MOVF   77,W
0178:  MOVWF  7B
0179:  MOVF   76,W
017A:  MOVWF  7A
017B:  MOVLW  68
017C:  BSF    03.5
017D:  MOVWF  23
017E:  MOVLW  5A
017F:  MOVWF  22
0180:  MOVLW  01
0181:  MOVWF  21
0182:  MOVLW  80
0183:  MOVWF  20
*
0274:  MOVF   23,W
0275:  MOVWF  79
0276:  MOVF   22,W
0277:  MOVWF  78
0278:  MOVF   21,W
0279:  MOVWF  77
027A:  MOVF   20,W
027B:  MOVWF  76
027C:  BSF    03.1
027D:  MOVF   79,W
027E:  MOVWF  7D
027F:  MOVF   78,W
0280:  MOVWF  7C
0281:  MOVF   77,W
0282:  MOVWF  7B
0283:  MOVF   76,W
0284:  MOVWF  7A
0285:  BSF    03.5
0286:  CLRF   23
0287:  CLRF   22
0288:  MOVLW  48
0289:  MOVWF  21
028A:  MOVLW  83
028B:  MOVWF  20
....................    //return((float)tmp/2.021142857-30);  
....................    //return((float)tmp); 
.................... }  
....................  
.................... float do_everything(int CS)  
.................... {  
....................    init_TC(CS);  
*
00CF:  MOVF   71,W
00D0:  MOVWF  72
....................    delay_ms(200);               //200ms is a long time to be doing nothing. use a timer interrupt to avoid wasting time here  
*
00E5:  MOVLW  C8
00E6:  MOVWF  76
00E7:  CALL   0BC
....................    return(toFloat_TC(sortout(read_TC(CS))));  
00E8:  MOVF   71,W
00E9:  MOVWF  72
*
0129:  MOVF   22,W
012A:  MOVWF  73
012B:  MOVF   21,W
012C:  MOVWF  72
012D:  MOVF   73,W
012E:  MOVWF  75
012F:  MOVF   72,W
0130:  MOVWF  74
*
0143:  MOVF   22,W
0144:  MOVWF  73
0145:  MOVF   21,W
0146:  MOVWF  72
0147:  MOVF   73,W
0148:  MOVWF  75
0149:  MOVF   72,W
014A:  MOVWF  74
*
0401:  RETURN
.................... }  
....................  
.................... //!#use rs232(baud=9600, xmitPIN_C6,rcv=PIN_C7) 
.................... int16  temp_Address_high = 2047-10; 
.................... int16  temp_Address_low = 2047-9; 
.................... int16  hum_Address_high = 2047-8; 
.................... int16  hum_Address_low = 2047-7; 
.................... char message1[3]; 
.................... char message2[3]; 
.................... short Time_out; 
.................... unsigned int8 T_byte1, T_byte2, RH_byte1, RH_byte2, CheckSum; 
.................... char digit[] = {~192, ~249, ~164, ~176, ~153, ~146, ~130, ~248, ~128, ~144, 192, ~134, ~135, ~163, ~171, ~142, ~191,~0b10000111,~0b10001100,~0b00001001}; 
*
0822:  MOVLW  3F
0823:  BCF    03.5
0824:  MOVWF  40
0825:  MOVLW  06
0826:  MOVWF  41
0827:  MOVLW  5B
0828:  MOVWF  42
0829:  MOVLW  4F
082A:  MOVWF  43
082B:  MOVLW  66
082C:  MOVWF  44
082D:  MOVLW  6D
082E:  MOVWF  45
082F:  MOVLW  7D
0830:  MOVWF  46
0831:  MOVLW  07
0832:  MOVWF  47
0833:  MOVLW  7F
0834:  MOVWF  48
0835:  MOVLW  6F
0836:  MOVWF  49
0837:  MOVLW  C0
0838:  MOVWF  4A
0839:  MOVLW  79
083A:  MOVWF  4B
083B:  MOVLW  78
083C:  MOVWF  4C
083D:  MOVLW  5C
083E:  MOVWF  4D
083F:  MOVLW  54
0840:  MOVWF  4E
0841:  MOVLW  71
0842:  MOVWF  4F
0843:  MOVLW  40
0844:  MOVWF  50
0845:  MOVLW  78
0846:  MOVWF  51
0847:  MOVLW  73
0848:  MOVWF  52
0849:  MOVLW  F6
084A:  MOVWF  53
.................... int8 digit_one, digit_two, digit_three, digit_four, digit_five, digit_six; 
.................... signed int16 temp_high,temp_low,hum_high,hum_low,menu_counter=0,main_temp,main_hum; 
.................... void dht11_RunTime(); 
.................... void menu(); 
.................... void runtime_relay_function(); 
.................... void runtime_kthermo(); 
.................... void start_signal() 
.................... { 
.................... //!   output_drive (DHT11_PIN); // configure connection pin as output 
.................... //!   output_low (DHT11_PIN); // connection pin output low 
.................... //!   delay_ms (25) ; 
.................... //!   output_high (DHT11_PIN); // connection pin output high 
.................... //!   delay_us (30) ; 
.................... //!   output_float (DHT11_PIN); // configure connection pin as input 
.................... } 
....................  
.................... short check_response() 
.................... { 
.................... //!   delay_us (40) ; 
.................... //!   if (!input (DHT11_PIN)) 
.................... //!   { 
.................... //!      // read and test if connection pin is low 
.................... //!      delay_us (80) ; 
.................... //!      if (input (DHT11_PIN)) 
.................... //!      { 
.................... //!         // read and test if connection pin is high 
.................... //!         delay_us (50) ; 
.................... //!         return 1; 
.................... //!      } 
.................... //!   } 
.................... } 
....................  
.................... unsigned int8 Read_Data() 
.................... { 
.................... //!   unsigned int8 i, k, _data = 0; // k is used to count 1 bit reading duration 
.................... //!   if (Time_out) 
.................... //!   break; 
.................... //!   for (i = 0; i < 8; i++) 
.................... //!   { 
.................... //!      k = 0; 
.................... //!      while (!input (DHT11_PIN)) 
.................... //!      { 
.................... //!         // Wait until DHT11 pin get raised 
.................... //!         k++; 
.................... //!         if (k > TimeOut_Count) 
.................... //!         { 
.................... //!            Time_out = 1; 
.................... //!            break; 
.................... //!         } 
.................... //! 
.................... //!         delay_us (1) ; 
.................... //!      } 
.................... //!      delay_us (30) ; 
.................... //!      if (!input (DHT11_PIN)) 
.................... //!      bit_clear (_data, (7 - i) ); // Clear bit (7 - i) 
.................... //!      else 
.................... //!      { 
.................... //!         bit_set (_data, (7 - i) ); // Set bit (7 - i) 
.................... //!         while (input (DHT11_PIN)) 
.................... //!         { 
.................... //!            // Wait until DHT11 pin goes low 
.................... //!            k++; 
.................... //!            if (k > TimeOut_Count) 
.................... //!            { 
.................... //!               Time_out = 1; 
.................... //!               break; 
.................... //!            } 
.................... //!            delay_us (1) ; 
.................... //!         } 
.................... //!      } 
.................... //!   } 
.................... //!   return _data; 
.................... } 
....................  
.................... //============================================================================== 
.................... void display_time() 
.................... { 
....................  
.................... } 
....................  
.................... //============================================================================== 
.................... void display_set_on() 
.................... { 
....................    digit_one = digit[10]; 
....................    digit_two = digit[11]; 
....................    digit_three = digit[12]; 
....................    digit_four = digit[13]; 
....................    digit_five = digit[14]; 
....................    digit_six = digit[16]; 
.................... } 
....................  
.................... //============================================================================== 
.................... void display_set_off() 
.................... { 
....................    digit_one = digit[10]; 
....................    digit_two = digit[11]; 
....................    digit_three = digit[12]; 
....................    digit_four = digit[13]; 
....................    digit_five = digit[15]; 
....................    digit_six = digit[15]; 
.................... } 
.................... void display_err() 
.................... { 
....................    digit_one = digit[13]; 
*
05F8:  MOVF   4D,W
05F9:  MOVWF  54
....................    digit_two = digit[15]; 
05FA:  MOVF   4F,W
05FB:  MOVWF  55
....................    digit_three = digit[15]; 
05FC:  MOVF   4F,W
05FD:  MOVWF  56
....................    digit_four = digit[10]; 
05FE:  MOVF   4A,W
05FF:  MOVWF  57
....................    digit_five = digit[10]; 
0600:  MOVF   4A,W
0601:  MOVWF  58
....................    digit_six = digit[10]; 
0602:  MOVF   4A,W
0603:  MOVWF  59
.................... } 
.................... void display_ok() 
.................... { 
....................    digit_one = digit[10]; 
*
060C:  MOVF   4A,W
060D:  MOVWF  54
....................    digit_two = digit[10]; 
060E:  MOVF   4A,W
060F:  MOVWF  55
....................    digit_three = digit[10]; 
0610:  MOVF   4A,W
0611:  MOVWF  56
....................    digit_four = digit[10]; 
0612:  MOVF   4A,W
0613:  MOVWF  57
....................    digit_five = digit[10]; 
0614:  MOVF   4A,W
0615:  MOVWF  58
....................    digit_six = digit[10]; 
0616:  MOVF   4A,W
0617:  MOVWF  59
.................... } 
....................  
.................... //============================================================================== 
.................... void display_set_hour() 
.................... { 
....................  
.................... } 
....................  
.................... //============================================================================== 
.................... void display_set_min() 
.................... { 
....................  
.................... } 
....................  
.................... //============================================================================== 
.................... void display_set_sec() 
.................... { 
....................  
.................... } 
.................... //============================================================================= 
.................... void fill_display_buff(signed int16 data,int8 titale) 
.................... { 
....................  if(titale == 1){ 
*
0440:  DECFSZ 73,W
0441:  GOTO   471
....................   digit_one = digit[(data/10)%10]; 
0442:  MOVF   72,W
0443:  MOVWF  77
0444:  MOVF   71,W
0445:  MOVWF  76
0446:  CLRF   79
0447:  MOVLW  0A
0448:  MOVWF  78
0449:  CALL   402
044A:  MOVF   22,W
044B:  MOVWF  75
044C:  MOVF   21,W
044D:  MOVWF  74
044E:  MOVF   22,W
044F:  MOVWF  77
0450:  MOVF   21,W
0451:  MOVWF  76
0452:  CLRF   79
0453:  MOVLW  0A
0454:  MOVWF  78
0455:  CALL   402
0456:  MOVLW  40
0457:  ADDWF  20,W
0458:  MOVWF  04
0459:  MOVF   00,W
045A:  MOVWF  54
....................   digit_two = digit[(data/1)%10]; 
045B:  MOVF   72,W
045C:  MOVWF  77
045D:  MOVF   71,W
045E:  MOVWF  76
045F:  CLRF   79
0460:  MOVLW  0A
0461:  MOVWF  78
0462:  CALL   402
0463:  MOVLW  40
0464:  ADDWF  20,W
0465:  MOVWF  04
0466:  MOVF   00,W
0467:  MOVWF  55
....................   digit_three = digit[10]; 
0468:  MOVF   4A,W
0469:  MOVWF  56
....................   digit_four =digit[10]; 
046A:  MOVF   4A,W
046B:  MOVWF  57
....................   digit_five =digit[17];  
046C:  MOVF   51,W
046D:  MOVWF  58
....................   digit_six = digit[1]; 
046E:  MOVF   41,W
046F:  MOVWF  59
....................  }else if(titale == 2){ 
0470:  GOTO   509
0471:  MOVF   73,W
0472:  SUBLW  02
0473:  BTFSS  03.2
0474:  GOTO   4A4
....................   digit_one = digit[(data/10)%10]; 
0475:  MOVF   72,W
0476:  MOVWF  77
0477:  MOVF   71,W
0478:  MOVWF  76
0479:  CLRF   79
047A:  MOVLW  0A
047B:  MOVWF  78
047C:  CALL   402
047D:  MOVF   22,W
047E:  MOVWF  75
047F:  MOVF   21,W
0480:  MOVWF  74
0481:  MOVF   22,W
0482:  MOVWF  77
0483:  MOVF   21,W
0484:  MOVWF  76
0485:  CLRF   79
0486:  MOVLW  0A
0487:  MOVWF  78
0488:  CALL   402
0489:  MOVLW  40
048A:  ADDWF  20,W
048B:  MOVWF  04
048C:  MOVF   00,W
048D:  MOVWF  54
....................   digit_two = digit[(data/1)%10]; 
048E:  MOVF   72,W
048F:  MOVWF  77
0490:  MOVF   71,W
0491:  MOVWF  76
0492:  CLRF   79
0493:  MOVLW  0A
0494:  MOVWF  78
0495:  CALL   402
0496:  MOVLW  40
0497:  ADDWF  20,W
0498:  MOVWF  04
0499:  MOVF   00,W
049A:  MOVWF  55
....................   digit_three = digit[10]; 
049B:  MOVF   4A,W
049C:  MOVWF  56
....................   digit_four =digit[10]; 
049D:  MOVF   4A,W
049E:  MOVWF  57
....................   digit_five =digit[17];  
049F:  MOVF   51,W
04A0:  MOVWF  58
....................   digit_six = digit[2]; 
04A1:  MOVF   42,W
04A2:  MOVWF  59
....................  }else if(titale == 3){ 
04A3:  GOTO   509
04A4:  MOVF   73,W
04A5:  SUBLW  03
04A6:  BTFSS  03.2
04A7:  GOTO   4D7
....................   digit_one = digit[(data/10)%10]; 
04A8:  MOVF   72,W
04A9:  MOVWF  77
04AA:  MOVF   71,W
04AB:  MOVWF  76
04AC:  CLRF   79
04AD:  MOVLW  0A
04AE:  MOVWF  78
04AF:  CALL   402
04B0:  MOVF   22,W
04B1:  MOVWF  75
04B2:  MOVF   21,W
04B3:  MOVWF  74
04B4:  MOVF   22,W
04B5:  MOVWF  77
04B6:  MOVF   21,W
04B7:  MOVWF  76
04B8:  CLRF   79
04B9:  MOVLW  0A
04BA:  MOVWF  78
04BB:  CALL   402
04BC:  MOVLW  40
04BD:  ADDWF  20,W
04BE:  MOVWF  04
04BF:  MOVF   00,W
04C0:  MOVWF  54
....................   digit_two = digit[(data/1)%10]; 
04C1:  MOVF   72,W
04C2:  MOVWF  77
04C3:  MOVF   71,W
04C4:  MOVWF  76
04C5:  CLRF   79
04C6:  MOVLW  0A
04C7:  MOVWF  78
04C8:  CALL   402
04C9:  MOVLW  40
04CA:  ADDWF  20,W
04CB:  MOVWF  04
04CC:  MOVF   00,W
04CD:  MOVWF  55
....................   digit_three = digit[10]; 
04CE:  MOVF   4A,W
04CF:  MOVWF  56
....................   digit_four =digit[10]; 
04D0:  MOVF   4A,W
04D1:  MOVWF  57
....................   digit_five =digit[19];  
04D2:  MOVF   53,W
04D3:  MOVWF  58
....................   digit_six = digit[1]; 
04D4:  MOVF   41,W
04D5:  MOVWF  59
....................  }else if(titale == 4){ 
04D6:  GOTO   509
04D7:  MOVF   73,W
04D8:  SUBLW  04
04D9:  BTFSS  03.2
04DA:  GOTO   509
....................   digit_one = digit[(data/10)%10]; 
04DB:  MOVF   72,W
04DC:  MOVWF  77
04DD:  MOVF   71,W
04DE:  MOVWF  76
04DF:  CLRF   79
04E0:  MOVLW  0A
04E1:  MOVWF  78
04E2:  CALL   402
04E3:  MOVF   22,W
04E4:  MOVWF  75
04E5:  MOVF   21,W
04E6:  MOVWF  74
04E7:  MOVF   22,W
04E8:  MOVWF  77
04E9:  MOVF   21,W
04EA:  MOVWF  76
04EB:  CLRF   79
04EC:  MOVLW  0A
04ED:  MOVWF  78
04EE:  CALL   402
04EF:  MOVLW  40
04F0:  ADDWF  20,W
04F1:  MOVWF  04
04F2:  MOVF   00,W
04F3:  MOVWF  54
....................   digit_two = digit[(data/1)%10]; 
04F4:  MOVF   72,W
04F5:  MOVWF  77
04F6:  MOVF   71,W
04F7:  MOVWF  76
04F8:  CLRF   79
04F9:  MOVLW  0A
04FA:  MOVWF  78
04FB:  CALL   402
04FC:  MOVLW  40
04FD:  ADDWF  20,W
04FE:  MOVWF  04
04FF:  MOVF   00,W
0500:  MOVWF  55
....................   digit_three = digit[10]; 
0501:  MOVF   4A,W
0502:  MOVWF  56
....................   digit_four =digit[10]; 
0503:  MOVF   4A,W
0504:  MOVWF  57
....................   digit_five =digit[19];  
0505:  MOVF   53,W
0506:  MOVWF  58
....................   digit_six = digit[2]; 
0507:  MOVF   42,W
0508:  MOVWF  59
....................  } 
0509:  RETURN
.................... } 
.................... //============================================================================= 
.................... void dht_display() 
.................... { 
.................... //!   digit_one = digit[message1[0]-48]; 
.................... //!   digit_two = digit[message1[1] -48]; 
.................... //!   digit_three = digit[message1[2] -48]; 
.................... //!   digit_three = digit[10]; 
....................    digit_four = digit[10]; 
*
052F:  MOVF   4A,W
0530:  MOVWF  57
....................    digit_one = digit[message2[0] -48]; 
0531:  MOVLW  30
0532:  SUBWF  38,W
0533:  ADDLW  40
0534:  MOVWF  04
0535:  MOVF   00,W
0536:  MOVWF  54
....................    digit_two = digit[message2[1] -48]; 
0537:  MOVLW  30
0538:  SUBWF  39,W
0539:  ADDLW  40
053A:  MOVWF  04
053B:  MOVF   00,W
053C:  MOVWF  55
.................... } 
.................... //============================================================================= 
....................   void temp_down_set(){ 
....................   static unsigned int16 press_counter = 0; 
....................   if(up_button == press) 
....................   { 
....................    while(up_button == press) 
....................    { 
....................      press_counter++; 
....................      if(press_counter >= 35000){ 
....................      break; 
....................     } 
....................    } 
....................    press_counter = 0; 
....................    temp_low++; 
....................    if(temp_low >= 99) 
....................    { 
....................     temp_low == 0; 
....................    } 
....................   } 
....................   else if(down_button == press) 
....................   { 
....................    while(down_button == press) 
....................    { 
....................      press_counter++; 
....................      if(press_counter >= 35000){ 
....................      break; 
....................     } 
....................    } 
....................    press_counter = 0; 
....................    temp_low--; 
....................    if(temp_low <= 1) 
....................    { 
....................     temp_low = 0; 
....................    } 
....................   } 
....................   fill_display_buff(temp_low,2); 
....................  } 
....................  //============================================================================  
....................  //**************************************************************************** 
....................   void temp_up_set(){ 
....................   static unsigned int16 press_counter = 0; 
....................   if(up_button == press) 
....................   {  
....................    while(up_button == press) 
....................    { 
....................      press_counter++; 
....................      if(press_counter >= 35000){ 
....................      break; 
....................     } 
....................    } 
....................    press_counter = 0; 
....................    temp_high++; 
....................    if(temp_high >= 99) 
....................    { 
....................     temp_high == 0; 
....................    } 
....................   } 
....................   else if(down_button == press) 
....................   { 
....................    while(down_button == press) 
....................    { 
....................      press_counter++; 
....................      if(press_counter >= 35000){ 
....................      break; 
....................     } 
....................    } 
....................    press_counter = 0; 
....................    temp_high--; 
....................    if(temp_high <= 1) 
....................    { 
....................     temp_high = 1; 
....................    } 
....................   } 
....................    fill_display_buff(temp_high,1); 
....................  } 
.................... //----------------------------------------------------------------------------- 
....................   void hum_up_set(){ 
....................   static unsigned int16 press_counter = 0; 
....................   if(up_button == press) 
053E:  BTFSC  07.7
053F:  GOTO   566
....................   {  
....................    while(up_button == press) 
0540:  BTFSC  07.7
0541:  GOTO   551
....................    { 
....................      press_counter++; 
0542:  INCF   6C,F
0543:  BTFSC  03.2
0544:  INCF   6D,F
....................      if(press_counter >= 35000){ 
0545:  MOVF   6D,W
0546:  SUBLW  87
0547:  BTFSC  03.0
0548:  GOTO   550
0549:  XORLW  FF
054A:  BTFSS  03.2
054B:  GOTO   54F
054C:  MOVF   6C,W
054D:  SUBLW  B7
054E:  BTFSS  03.0
....................      break; 
054F:  GOTO   551
....................     } 
0550:  GOTO   540
....................    } 
....................    press_counter = 0; 
0551:  CLRF   6D
0552:  CLRF   6C
....................    hum_high++; 
0553:  INCF   5E,F
0554:  BTFSC  03.2
0555:  INCF   5F,F
....................    if(hum_high >= 99) 
0556:  BTFSC  5F.7
0557:  GOTO   565
0558:  MOVF   5F,F
0559:  BTFSS  03.2
055A:  GOTO   55F
055B:  MOVF   5E,W
055C:  SUBLW  62
055D:  BTFSC  03.0
055E:  GOTO   565
....................    { 
....................     hum_high == 0; 
055F:  MOVF   5E,F
0560:  BTFSS  03.2
0561:  GOTO   564
0562:  MOVF   5F,F
0563:  BTFSS  03.2
0564:  MOVLW  00
....................    } 
....................   } 
0565:  GOTO   58B
....................   else if(down_button == press) 
0566:  BTFSC  05.3
0567:  GOTO   58B
....................   { 
....................    while(down_button == press) 
0568:  BTFSC  05.3
0569:  GOTO   579
....................    { 
....................      press_counter++; 
056A:  INCF   6C,F
056B:  BTFSC  03.2
056C:  INCF   6D,F
....................      if(press_counter >= 35000){ 
056D:  MOVF   6D,W
056E:  SUBLW  87
056F:  BTFSC  03.0
0570:  GOTO   578
0571:  XORLW  FF
0572:  BTFSS  03.2
0573:  GOTO   577
0574:  MOVF   6C,W
0575:  SUBLW  B7
0576:  BTFSS  03.0
....................      break; 
0577:  GOTO   579
....................     } 
0578:  GOTO   568
....................    } 
....................    press_counter = 0; 
0579:  CLRF   6D
057A:  CLRF   6C
....................    hum_high--; 
057B:  MOVF   5E,W
057C:  BTFSC  03.2
057D:  DECF   5F,F
057E:  DECF   5E,F
....................    if(hum_high <= 1) 
057F:  BTFSC  5F.7
0580:  GOTO   588
0581:  MOVF   5F,F
0582:  BTFSS  03.2
0583:  GOTO   58B
0584:  MOVF   5E,W
0585:  SUBLW  01
0586:  BTFSS  03.0
0587:  GOTO   58B
....................    { 
....................     hum_high = 1; 
0588:  CLRF   5F
0589:  MOVLW  01
058A:  MOVWF  5E
....................    } 
....................   } 
....................    fill_display_buff(hum_high,3); 
058B:  MOVF   5F,W
058C:  MOVWF  72
058D:  MOVF   5E,W
058E:  MOVWF  71
058F:  MOVLW  03
0590:  MOVWF  73
0591:  CALL   440
....................  } 
.................... //----------------------------------------------------------------------------- 
....................   void hum_down_set(){ 
....................   static unsigned int16 press_counter = 0; 
....................   if(up_button == press) 
0593:  BTFSC  07.7
0594:  GOTO   5BB
....................   { 
....................    while(up_button == press) 
0595:  BTFSC  07.7
0596:  GOTO   5A6
....................    { 
....................      press_counter++; 
0597:  INCF   6E,F
0598:  BTFSC  03.2
0599:  INCF   6F,F
....................      if(press_counter >= 35000){ 
059A:  MOVF   6F,W
059B:  SUBLW  87
059C:  BTFSC  03.0
059D:  GOTO   5A5
059E:  XORLW  FF
059F:  BTFSS  03.2
05A0:  GOTO   5A4
05A1:  MOVF   6E,W
05A2:  SUBLW  B7
05A3:  BTFSS  03.0
....................      break; 
05A4:  GOTO   5A6
....................     } 
05A5:  GOTO   595
....................    } 
....................    press_counter = 0; 
05A6:  CLRF   6F
05A7:  CLRF   6E
....................    hum_low++; 
05A8:  INCF   60,F
05A9:  BTFSC  03.2
05AA:  INCF   61,F
....................    if(hum_low >= 99) 
05AB:  BTFSC  61.7
05AC:  GOTO   5BA
05AD:  MOVF   61,F
05AE:  BTFSS  03.2
05AF:  GOTO   5B4
05B0:  MOVF   60,W
05B1:  SUBLW  62
05B2:  BTFSC  03.0
05B3:  GOTO   5BA
....................    { 
....................     hum_low == 0; 
05B4:  MOVF   60,F
05B5:  BTFSS  03.2
05B6:  GOTO   5B9
05B7:  MOVF   61,F
05B8:  BTFSS  03.2
05B9:  MOVLW  00
....................    } 
....................   } 
05BA:  GOTO   5DF
....................   else if(down_button == press) 
05BB:  BTFSC  05.3
05BC:  GOTO   5DF
....................   { 
....................    while(down_button == press) 
05BD:  BTFSC  05.3
05BE:  GOTO   5CE
....................    { 
....................      press_counter++; 
05BF:  INCF   6E,F
05C0:  BTFSC  03.2
05C1:  INCF   6F,F
....................      if(press_counter >= 35000){ 
05C2:  MOVF   6F,W
05C3:  SUBLW  87
05C4:  BTFSC  03.0
05C5:  GOTO   5CD
05C6:  XORLW  FF
05C7:  BTFSS  03.2
05C8:  GOTO   5CC
05C9:  MOVF   6E,W
05CA:  SUBLW  B7
05CB:  BTFSS  03.0
....................      break; 
05CC:  GOTO   5CE
....................     } 
05CD:  GOTO   5BD
....................    } 
....................    press_counter = 0; 
05CE:  CLRF   6F
05CF:  CLRF   6E
....................    hum_low--; 
05D0:  MOVF   60,W
05D1:  BTFSC  03.2
05D2:  DECF   61,F
05D3:  DECF   60,F
....................    if(hum_low <= 1) 
05D4:  BTFSC  61.7
05D5:  GOTO   5DD
05D6:  MOVF   61,F
05D7:  BTFSS  03.2
05D8:  GOTO   5DF
05D9:  MOVF   60,W
05DA:  SUBLW  01
05DB:  BTFSS  03.0
05DC:  GOTO   5DF
....................    { 
....................     hum_low = 0; 
05DD:  CLRF   61
05DE:  CLRF   60
....................    } 
....................   } 
....................   fill_display_buff(hum_low,4); 
05DF:  MOVF   61,W
05E0:  MOVWF  72
05E1:  MOVF   60,W
05E2:  MOVWF  71
05E3:  MOVLW  04
05E4:  MOVWF  73
05E5:  CALL   440
....................  } 
.................... //============================================================================= 
.................... void runtime_relay_function() 
.................... { 
....................   if(main_temp >= temp_high) 
*
06E3:  BTFSS  5B.7
06E4:  GOTO   6E8
06E5:  BTFSS  65.7
06E6:  GOTO   6F4
06E7:  GOTO   6EA
06E8:  BTFSC  65.7
06E9:  GOTO   6F9
06EA:  MOVF   5B,W
06EB:  SUBWF  65,W
06EC:  BTFSS  03.0
06ED:  GOTO   6F9
06EE:  BTFSS  03.2
06EF:  GOTO   6F4
06F0:  MOVF   5A,W
06F1:  SUBWF  64,W
06F2:  BTFSS  03.0
06F3:  GOTO   6F9
....................   { 
....................    rly1_off; 
06F4:  BSF    03.5
06F5:  BCF    05.1
06F6:  BCF    03.5
06F7:  BSF    05.1
....................   }else if(main_temp <= temp_low) 
06F8:  GOTO   70E
06F9:  BTFSS  65.7
06FA:  GOTO   6FE
06FB:  BTFSS  5D.7
06FC:  GOTO   70A
06FD:  GOTO   700
06FE:  BTFSC  5D.7
06FF:  GOTO   70E
0700:  MOVF   65,W
0701:  SUBWF  5D,W
0702:  BTFSS  03.0
0703:  GOTO   70E
0704:  BTFSS  03.2
0705:  GOTO   70A
0706:  MOVF   64,W
0707:  SUBWF  5C,W
0708:  BTFSS  03.0
0709:  GOTO   70E
....................   { 
....................    rly1_on;   
070A:  BSF    03.5
070B:  BCF    05.1
070C:  BCF    03.5
070D:  BCF    05.1
....................   } 
....................   //------------- 
....................   if(main_hum >= hum_high) 
070E:  BTFSS  5F.7
070F:  GOTO   713
0710:  BTFSS  67.7
0711:  GOTO   71F
0712:  GOTO   715
0713:  BTFSC  67.7
0714:  GOTO   724
0715:  MOVF   5F,W
0716:  SUBWF  67,W
0717:  BTFSS  03.0
0718:  GOTO   724
0719:  BTFSS  03.2
071A:  GOTO   71F
071B:  MOVF   5E,W
071C:  SUBWF  66,W
071D:  BTFSS  03.0
071E:  GOTO   724
....................   { 
....................    rly2_off; 
071F:  BSF    03.5
0720:  BCF    05.2
0721:  BCF    03.5
0722:  BSF    05.2
....................   }else if(main_hum <= hum_low) 
0723:  GOTO   739
0724:  BTFSS  67.7
0725:  GOTO   729
0726:  BTFSS  61.7
0727:  GOTO   735
0728:  GOTO   72B
0729:  BTFSC  61.7
072A:  GOTO   739
072B:  MOVF   67,W
072C:  SUBWF  61,W
072D:  BTFSS  03.0
072E:  GOTO   739
072F:  BTFSS  03.2
0730:  GOTO   735
0731:  MOVF   66,W
0732:  SUBWF  60,W
0733:  BTFSS  03.0
0734:  GOTO   739
....................   { 
....................    rly2_on;   
0735:  BSF    03.5
0736:  BCF    05.2
0737:  BCF    03.5
0738:  BCF    05.2
....................   } 
0739:  BSF    0A.3
073A:  GOTO   0CC (RETURN)
.................... } 
.................... //----------------------------------------------------------------------------- 
.................... void main() 
*
0800:  MOVF   03,W
0801:  ANDLW  1F
0802:  MOVWF  03
0803:  MOVLW  07
0804:  MOVWF  2E
0805:  MOVLW  F5
0806:  MOVWF  2D
0807:  MOVLW  07
0808:  MOVWF  30
0809:  MOVLW  F6
080A:  MOVWF  2F
080B:  MOVLW  07
080C:  MOVWF  32
080D:  MOVLW  F7
080E:  MOVWF  31
080F:  MOVLW  07
0810:  MOVWF  34
0811:  MOVLW  F8
0812:  MOVWF  33
0813:  CLRF   63
0814:  CLRF   62
0815:  CLRF   69
0816:  CLRF   68
0817:  CLRF   6B
0818:  CLRF   6A
0819:  CLRF   6D
081A:  CLRF   6C
081B:  CLRF   6F
081C:  CLRF   6E
081D:  CLRF   70
081E:  BSF    03.5
081F:  BSF    1F.0
0820:  BSF    1F.1
0821:  BSF    1F.2
.................... { 
....................    temp_high=read_program_eeprom(temp_Address_high); 
*
084B:  MOVF   2D,W
084C:  BSF    03.6
084D:  MOVWF  0D
084E:  BCF    03.6
084F:  MOVF   2E,W
0850:  BSF    03.6
0851:  MOVWF  0F
0852:  BSF    03.5
0853:  BSF    0C.7
0854:  BSF    0C.0
0855:  NOP
0856:  NOP
0857:  BCF    03.5
0858:  MOVF   0E,W
0859:  BCF    03.6
085A:  MOVWF  23
085B:  BSF    03.6
085C:  MOVF   0C,W
085D:  BCF    03.6
085E:  MOVWF  5A
085F:  MOVF   23,W
0860:  MOVWF  5B
....................    temp_low=read_program_eeprom(temp_Address_low); 
0861:  MOVF   2F,W
0862:  BSF    03.6
0863:  MOVWF  0D
0864:  BCF    03.6
0865:  MOVF   30,W
0866:  BSF    03.6
0867:  MOVWF  0F
0868:  BSF    03.5
0869:  BSF    0C.7
086A:  BSF    0C.0
086B:  NOP
086C:  NOP
086D:  BCF    03.5
086E:  MOVF   0E,W
086F:  BCF    03.6
0870:  MOVWF  23
0871:  BSF    03.6
0872:  MOVF   0C,W
0873:  BCF    03.6
0874:  MOVWF  5C
0875:  MOVF   23,W
0876:  MOVWF  5D
....................    hum_high=read_program_eeprom(hum_Address_high); 
0877:  MOVF   31,W
0878:  BSF    03.6
0879:  MOVWF  0D
087A:  BCF    03.6
087B:  MOVF   32,W
087C:  BSF    03.6
087D:  MOVWF  0F
087E:  BSF    03.5
087F:  BSF    0C.7
0880:  BSF    0C.0
0881:  NOP
0882:  NOP
0883:  BCF    03.5
0884:  MOVF   0E,W
0885:  BCF    03.6
0886:  MOVWF  23
0887:  BSF    03.6
0888:  MOVF   0C,W
0889:  BCF    03.6
088A:  MOVWF  5E
088B:  MOVF   23,W
088C:  MOVWF  5F
....................    hum_low=read_program_eeprom(hum_Address_low); 
088D:  MOVF   33,W
088E:  BSF    03.6
088F:  MOVWF  0D
0890:  BCF    03.6
0891:  MOVF   34,W
0892:  BSF    03.6
0893:  MOVWF  0F
0894:  BSF    03.5
0895:  BSF    0C.7
0896:  BSF    0C.0
0897:  NOP
0898:  NOP
0899:  BCF    03.5
089A:  MOVF   0E,W
089B:  BCF    03.6
089C:  MOVWF  23
089D:  BSF    03.6
089E:  MOVF   0C,W
089F:  BCF    03.6
08A0:  MOVWF  60
08A1:  MOVF   23,W
08A2:  MOVWF  61
....................    set_tris_b (0x00) ; 
08A3:  MOVLW  00
08A4:  BSF    03.5
08A5:  MOVWF  06
....................    SETUP_ADC_PORTS (NO_ANALOGS) ; 
08A6:  BSF    1F.0
08A7:  BSF    1F.1
08A8:  BSF    1F.2
....................    //!  SETUP_TIMER_0(T0_INTERNAL | T0_DIV_4); 
....................    setup_timer_0 (RTCC_INTERNAL|RTCC_DIV_128|RTCC_8_BIT); //16.3 ms overflow 
08A9:  MOVF   01,W
08AA:  ANDLW  C0
08AB:  IORLW  06
08AC:  MOVWF  01
.................... //!   setup_timer_1 (T1_INTERNAL|T1_DIV_BY_2);     //32.7 ms overflow 
....................    SET_TIMER0 (128) ; 
08AD:  MOVLW  80
08AE:  BCF    03.5
08AF:  MOVWF  01
.................... //!   SET_TIMER1 (0) ; 
....................    enable_interrupts (int_TIMER0) ; 
08B0:  BSF    0B.5
....................    disable_interrupts (int_TIMER1) ; 
08B1:  BSF    03.5
08B2:  BCF    0C.0
.................... //!   enable_interrupts (PERIPH) ; 
....................    enable_interrupts (GLOBAL) ; 
08B3:  MOVLW  C0
08B4:  BCF    03.5
08B5:  IORWF  0B,F
....................    do_everything(TC_CS); 
08B6:  MOVLW  2A
08B7:  MOVWF  71
08B8:  BCF    0A.3
08B9:  CALL   0CF
08BA:  BSF    0A.3
....................    delay_ms (1000) ; 
08BB:  MOVLW  04
08BC:  MOVWF  71
08BD:  MOVLW  FA
08BE:  MOVWF  76
08BF:  BCF    0A.3
08C0:  CALL   0BC
08C1:  BSF    0A.3
08C2:  DECFSZ 71,F
08C3:  GOTO   0BD
....................    while (TRUE) 
....................    { 
.................... //!   fill_display_buff(999); 
....................       menu(); 
08C4:  BCF    0A.3
08C5:  GOTO   50A
08C6:  BSF    0A.3
....................       runtime_kthermo(); 
08C7:  BCF    0A.3
08C8:  GOTO   64A
08C9:  BSF    0A.3
....................       runtime_relay_function(); 
08CA:  BCF    0A.3
08CB:  GOTO   6E3
08CC:  BSF    0A.3
....................       delay_ms (10) ; 
08CD:  MOVLW  0A
08CE:  MOVWF  76
08CF:  BCF    0A.3
08D0:  CALL   0BC
08D1:  BSF    0A.3
08D2:  GOTO   0C4
....................    } 
.................... } 
.................... void menu() 
08D3:  SLEEP
.................... { 
.................... if(set_button == press ) 
*
050A:  BTFSC  07.6
050B:  GOTO   50F
....................  { 
....................   menu_counter++; 
050C:  INCF   62,F
050D:  BTFSC  03.2
050E:  INCF   63,F
....................  } 
....................  switch (menu_counter) 
050F:  MOVF   62,W
0510:  MOVWF  20
0511:  MOVF   63,W
0512:  MOVWF  23
0513:  MOVF   23,W
0514:  BTFSS  03.2
0515:  GOTO   519
0516:  MOVF   20,F
0517:  BTFSC  03.2
0518:  GOTO   52F
0519:  MOVF   23,W
051A:  BTFSS  03.2
051B:  GOTO   520
051C:  MOVLW  01
051D:  SUBWF  20,W
051E:  BTFSC  03.2
051F:  GOTO   53E
0520:  MOVF   23,W
0521:  BTFSS  03.2
0522:  GOTO   527
0523:  MOVLW  02
0524:  SUBWF  20,W
0525:  BTFSC  03.2
0526:  GOTO   593
0527:  MOVF   23,W
0528:  BTFSS  03.2
0529:  GOTO   52E
052A:  MOVLW  03
052B:  SUBWF  20,W
052C:  BTFSC  03.2
052D:  GOTO   5E7
052E:  GOTO   621
....................  { 
....................   case 0: 
....................    dht_display(); 
....................   break; 
*
053D:  GOTO   621
.................... //!  case 1: 
.................... //!   temp_up_set(); 
.................... //!  break; 
.................... //!  case 2: 
.................... //!   temp_down_set(); 
.................... //!  break; 
....................   case 1: 
....................    hum_up_set(); 
....................   break; 
*
0592:  GOTO   621
....................   case 2: 
....................    hum_down_set(); 
....................   break; 
*
05E6:  GOTO   621
....................   case 3: 
.................... //!  if(temp_low >= temp_high && hum_low >= hum_high) 
....................   if(hum_low >= hum_high) 
05E7:  BTFSS  5F.7
05E8:  GOTO   5EC
05E9:  BTFSS  61.7
05EA:  GOTO   5F8
05EB:  GOTO   5EE
05EC:  BTFSC  61.7
05ED:  GOTO   60C
05EE:  MOVF   5F,W
05EF:  SUBWF  61,W
05F0:  BTFSS  03.0
05F1:  GOTO   60C
05F2:  BTFSS  03.2
05F3:  GOTO   5F8
05F4:  MOVF   5E,W
05F5:  SUBWF  60,W
05F6:  BTFSS  03.0
05F7:  GOTO   60C
....................   { 
....................    display_err(); 
....................    delay_ms(1000); 
*
0604:  MOVLW  04
0605:  MOVWF  71
0606:  MOVLW  FA
0607:  MOVWF  76
0608:  CALL   0BC
0609:  DECFSZ 71,F
060A:  GOTO   606
....................   }else { 
060B:  GOTO   61F
.................... //!   write_program_eeprom(temp_Address_high,(int16)temp_high); 
.................... //!   write_program_eeprom(temp_Address_low,(int16)temp_low); 
.................... //!   write_program_eeprom(hum_Address_high,(int16)hum_high); 
.................... //!   write_program_eeprom(hum_Address_low,(int16)hum_low); 
....................    display_ok(); 
....................    delay_ms(1000); 
*
0618:  MOVLW  04
0619:  MOVWF  71
061A:  MOVLW  FA
061B:  MOVWF  76
061C:  CALL   0BC
061D:  DECFSZ 71,F
061E:  GOTO   61A
....................   } 
....................   menu_counter = 0; 
061F:  CLRF   63
0620:  CLRF   62
....................   break; 
....................  } 
....................  while(set_button == press); 
0621:  BTFSS  07.6
0622:  GOTO   621
0623:  BSF    0A.3
0624:  GOTO   0C6 (RETURN)
.................... } 
.................... void runtime_kthermo() 
.................... { 
....................    main_temp = do_everything(TC_CS); 
*
064A:  MOVLW  2A
064B:  MOVWF  71
064C:  CALL   0CF
064D:  MOVF   23,W
064E:  MOVWF  74
064F:  MOVF   22,W
0650:  MOVWF  73
0651:  MOVF   21,W
0652:  MOVWF  72
0653:  MOVF   20,W
0654:  MOVWF  71
*
0673:  MOVF   22,W
0674:  MOVWF  65
0675:  MOVF   21,W
0676:  MOVWF  64
.................... //!   main_temp = 57; 
....................    message1[0] = ((main_temp /100)%10) + 48; 
0677:  MOVF   65,W
0678:  MOVWF  77
0679:  MOVF   64,W
067A:  MOVWF  76
067B:  CLRF   79
067C:  MOVLW  64
067D:  MOVWF  78
067E:  CALL   402
067F:  MOVF   22,W
0680:  MOVWF  72
0681:  MOVF   21,W
0682:  MOVWF  71
0683:  MOVF   22,W
0684:  MOVWF  77
0685:  MOVF   21,W
0686:  MOVWF  76
0687:  CLRF   79
0688:  MOVLW  0A
0689:  MOVWF  78
068A:  CALL   402
068B:  MOVF   23,W
068C:  MOVWF  72
068D:  MOVLW  30
068E:  ADDWF  20,W
068F:  MOVWF  21
0690:  MOVF   23,W
0691:  MOVWF  23
0692:  BTFSC  03.0
0693:  INCF   23,F
0694:  MOVF   21,W
0695:  MOVWF  35
....................    message1[1] = ((main_temp /10) % 10) + 48; 
0696:  MOVF   65,W
0697:  MOVWF  77
0698:  MOVF   64,W
0699:  MOVWF  76
069A:  CLRF   79
069B:  MOVLW  0A
069C:  MOVWF  78
069D:  CALL   402
069E:  MOVF   22,W
069F:  MOVWF  72
06A0:  MOVF   21,W
06A1:  MOVWF  71
06A2:  MOVF   22,W
06A3:  MOVWF  77
06A4:  MOVF   21,W
06A5:  MOVWF  76
06A6:  CLRF   79
06A7:  MOVLW  0A
06A8:  MOVWF  78
06A9:  CALL   402
06AA:  MOVF   23,W
06AB:  MOVWF  72
06AC:  MOVLW  30
06AD:  ADDWF  20,W
06AE:  MOVWF  21
06AF:  MOVF   23,W
06B0:  MOVWF  23
06B1:  BTFSC  03.0
06B2:  INCF   23,F
06B3:  MOVF   21,W
06B4:  MOVWF  36
....................    message1[2] = ((main_temp /1)%10) + 48; 
06B5:  MOVF   65,W
06B6:  MOVWF  77
06B7:  MOVF   64,W
06B8:  MOVWF  76
06B9:  CLRF   79
06BA:  MOVLW  0A
06BB:  MOVWF  78
06BC:  CALL   402
06BD:  MOVF   23,W
06BE:  MOVWF  72
06BF:  MOVLW  30
06C0:  ADDWF  20,W
06C1:  MOVWF  21
06C2:  MOVF   23,W
06C3:  MOVWF  23
06C4:  BTFSC  03.0
06C5:  INCF   23,F
06C6:  MOVF   21,W
06C7:  MOVWF  37
.................... //!   message2[0] = RH_Byte1 / 10 + 48; 
.................... //!   message2[1] = RH_Byte1 % 10 + 48; 
.................... //!   message2[2] = RH_Byte2 / 10 + 48; 
....................    main_temp = ((message1[0]-48)*100)+((message1[1]-48)*10)+(message1[2]-48); 
06C8:  MOVLW  30
06C9:  SUBWF  35,W
06CA:  MOVWF  72
06CB:  MOVWF  74
06CC:  MOVLW  64
06CD:  MOVWF  75
06CE:  CALL   625
06CF:  MOVF   21,W
06D0:  MOVWF  71
06D1:  MOVLW  30
06D2:  SUBWF  36,W
06D3:  MOVWF  73
06D4:  MOVWF  74
06D5:  MOVLW  0A
06D6:  MOVWF  75
06D7:  CALL   625
06D8:  MOVF   21,W
06D9:  ADDWF  71,F
06DA:  MOVLW  30
06DB:  SUBWF  37,W
06DC:  ADDWF  71,W
06DD:  CLRF   23
06DE:  MOVWF  64
06DF:  MOVF   23,W
06E0:  MOVWF  65
06E1:  BSF    0A.3
06E2:  GOTO   0C9 (RETURN)
.................... //!   main_temp = 250; 
.................... } 
.................... void dht11_RunTime() 
.................... { 
....................       Time_out = 0; 
....................       Start_signal () ; 
....................       if (check_response ()) 
....................       { 
....................          // if there is a response from sensor 
....................                RH_byte1 = Read_Data(); // read RH byte1 
....................                RH_byte2 = Read_Data(); // read RH byte2 
....................                T_byte1 = Read_Data();  // read T byte1 
....................                T_byte2 = Read_Data();  // read T byte2 
....................                Checksum = Read_Data(); // read checksum 
....................        
....................          if (Time_out) 
....................          { 
....................             // If reading takes long time 
.................... //!            display_set_off () ; 
....................          } 
....................          else 
....................          { 
....................             if (CheckSum == ((RH_Byte1 + RH_Byte2 + T_Byte1 + T_Byte2)&0xFF)) 
....................             { 
....................                message1[0] = T_Byte1 / 10 + 48; 
....................                message1[1] = T_Byte1 % 10 + 48; 
....................                message1[2] = T_Byte2 / 10 + 48; 
....................                message2[0] = RH_Byte1 / 10 + 48; 
....................                message2[1] = RH_Byte1 % 10 + 48; 
....................                message2[2] = RH_Byte2 / 10 + 48; 
....................                main_temp = ((message1[0]-48)*10)+(message1[1]-48); 
....................                main_hum =((message2[0]-48)*10)+(message2[1]-48);       
.................... //!               printf("Temp:%lu Hum:%lu \n\r",main_temp,main_hum); 
....................             } 
....................             else 
....................             { 
....................              //!            display_set_off () ; 
....................             } 
....................          } 
....................       } 
....................       else 
....................       { 
....................       //!            display_set_off () ; 
....................       } 
.................... } 
.................... #int_TIMER0 
.................... void TIMER0_isr(void) 
.................... { 
....................    static int8 number_of_segment = 0; 
....................    SET_TIMER0 (100); 
*
0042:  MOVLW  64
0043:  MOVWF  01
....................    output_c (0); 
0044:  BSF    03.5
0045:  CLRF   07
0046:  BCF    03.5
0047:  CLRF   07
....................    number_of_segment++; 
0048:  INCF   70,F
....................    switch (number_of_segment) 
0049:  MOVLW  01
004A:  SUBWF  70,W
004B:  ADDLW  FA
004C:  BTFSC  03.0
004D:  GOTO   092
004E:  ADDLW  06
004F:  GOTO   095
....................    { 
....................       case 1: 
....................       output_b (digit_one&0x7F); 
0050:  MOVF   54,W
0051:  ANDLW  7F
0052:  BSF    03.5
0053:  MOVWF  2E
0054:  BCF    03.5
0055:  MOVWF  06
....................       digit_one_on;       
0056:  BSF    03.5
0057:  BCF    07.0
0058:  BCF    03.5
0059:  BSF    07.0
....................       break; 
005A:  GOTO   092
....................       case 2: 
....................       output_b (digit_two|0b10000000) ; 
005B:  MOVF   55,W
005C:  IORLW  80
005D:  BSF    03.5
005E:  MOVWF  2E
005F:  BCF    03.5
0060:  MOVWF  06
....................       digit_two_on; 
0061:  BSF    03.5
0062:  BCF    07.1
0063:  BCF    03.5
0064:  BSF    07.1
....................       break; 
0065:  GOTO   092
....................       case 3: 
....................       output_b (digit_three&0x7F) ; 
0066:  MOVF   56,W
0067:  ANDLW  7F
0068:  BSF    03.5
0069:  MOVWF  2E
006A:  BCF    03.5
006B:  MOVWF  06
....................       digit_three_on; 
006C:  BSF    03.5
006D:  BCF    07.2
006E:  BCF    03.5
006F:  BSF    07.2
....................       break; 
0070:  GOTO   092
....................       case 4: 
....................       output_b (digit_four&0x7F) ; 
0071:  MOVF   57,W
0072:  ANDLW  7F
0073:  BSF    03.5
0074:  MOVWF  2E
0075:  BCF    03.5
0076:  MOVWF  06
....................       digit_four_on; 
0077:  BSF    03.5
0078:  BCF    07.3
0079:  BCF    03.5
007A:  BSF    07.3
....................       break; 
007B:  GOTO   092
....................       case 5: 
....................       output_b (digit_five&0x7F) ; 
007C:  MOVF   58,W
007D:  ANDLW  7F
007E:  BSF    03.5
007F:  MOVWF  2E
0080:  BCF    03.5
0081:  MOVWF  06
....................       digit_five_on; 
0082:  BSF    03.5
0083:  BCF    07.4
0084:  BCF    03.5
0085:  BSF    07.4
....................       break; 
0086:  GOTO   092
....................       case 6: 
....................       output_b (digit_six&0x7F) ; 
0087:  MOVF   59,W
0088:  ANDLW  7F
0089:  BSF    03.5
008A:  MOVWF  2E
008B:  BCF    03.5
008C:  MOVWF  06
....................       digit_six_on; 
008D:  BSF    03.5
008E:  BCF    07.5
008F:  BCF    03.5
0090:  BSF    07.5
....................       number_of_segment = 0; 
0091:  CLRF   70
....................       break; 
....................    } 
.................... //!   if (number_of_segment == 1) 
.................... //!   { 
.................... //!      output_b (digit_one&0x7F) ; 
.................... //!      digit_one_on; 
.................... //!   } 
.................... //! 
.................... //!   else if (number_of_segment == 2) 
.................... //!   { 
.................... //!      output_b (digit_two|0b10000000) ; 
.................... //!      digit_two_on; 
.................... //!   } 
.................... //! 
.................... //!   else if (number_of_segment == 3) 
.................... //!   { 
.................... //!      output_b (digit_three&0x7F) ; 
.................... //!      digit_three_on; 
.................... //!   } 
.................... //! 
.................... //!   else if (number_of_segment == 4) 
.................... //!   { 
.................... //!      output_b (digit_four&0x7F) ; 
.................... //!      digit_four_on; 
.................... //!   } 
.................... //! 
.................... //!   else if (number_of_segment == 5) 
.................... //!   { 
.................... //!      output_b (digit_five&0x7F) ; 
.................... //!      digit_five_on; 
.................... //!   } 
.................... //! 
.................... //!   else if (number_of_segment == 6) 
.................... //!   { 
.................... //!      output_b (digit_six&0x7F) ; 
.................... //!      digit_six_on; 
.................... //!      number_of_segment = 0; 
.................... //!   } 
0092:  BCF    0B.2
0093:  BCF    0A.3
0094:  GOTO   02D
.................... } 
....................  
....................  

Configuration Fuses:
   Word  1: 3FF2   HS NOWDT PUT NOPROTECT BROWNOUT

ROM data:
0007F5: 0019 0014 0032 0028 0000 0000 0000 0000    .....2.(........
